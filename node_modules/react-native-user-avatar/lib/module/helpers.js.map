{"version":3,"sources":["helpers.js"],"names":["abbr","name","startsWith","console","warn","sumChars","str","sum","i","length","charCodeAt","fetchImage","src","fetch","fetchCall","headers","map","generateBackgroundStyle","bgColor","bgColors","background","backgroundColor","getContainerStyle","size","borderRadius","borderWidth","borderColor","justifyContent","alignItems"],"mappings":"6UAAA,0DAEO,GAAMA,CAAAA,IAAI,CAAG,cAACC,IAAD,CAAU,CAC5B,GAAID,CAAAA,IAAI,CAAG,sBAASC,IAAT,CAAX,CACA,GAAIA,IAAI,CAACC,UAAL,CAAgB,GAAhB,CAAJ,CAA0B,CACxBF,IAAI,YAAQA,IAAR,CAAJ,CACD,CACD,GAAI,CAACA,IAAL,CAAW,CACTG,OAAO,CAACC,IAAR,CAAa,8BAAb,EACAJ,IAAI,CAAGC,IAAP,CACD,CACD,MAAOD,CAAAA,IAAP,CACD,CAVM,C,kBAYA,GAAMK,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,GAAD,CAAS,CAC/B,GAAIC,CAAAA,GAAG,CAAG,CAAV,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,GAAG,CAACG,MAAxB,CAAgCD,CAAC,EAAjC,CAAqC,CACnCD,GAAG,EAAID,GAAG,CAACI,UAAJ,CAAeF,CAAf,CAAP,CACD,CAED,MAAOD,CAAAA,GAAP,CACD,CAPM,C,0BASA,GAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAOC,GAAP,uMAEEC,KAAK,CAACD,GAAD,CAFP,SAEhBE,SAFgB,mBAGlBA,SAAS,CAACC,OAAV,CAAkBC,GAAlB,CAAsB,cAAtB,EAAsCd,UAAtC,CAAiD,QAAjD,CAHkB,yDAIb,IAJa,SAMpBC,OAAO,CAACC,IAAR,CAAa,gDAAb,EANoB,gCAOb,KAPa,2FAUtBD,OAAO,CAACC,IAAR,CAAa,iDAAb,cAVsB,gCAWf,KAXe,4EAAnB,C,8BAeA,GAAMa,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAChB,IAAD,CAAOiB,OAAP,CAAgBC,QAAhB,CAA6B,CAClE,GAAIC,CAAAA,UAAJ,CACA,GAAIF,OAAJ,CAAa,CACXE,UAAU,CAAGF,OAAb,CACD,CAFD,IAEO,CAEL,GAAMV,CAAAA,CAAC,CAAGH,QAAQ,CAACJ,IAAD,CAAR,CAAiBkB,QAAQ,CAACV,MAApC,CACAW,UAAU,CAAGD,QAAQ,CAACX,CAAD,CAArB,CACD,CACD,MAAO,CAACa,eAAe,CAAED,UAAlB,CAAP,CACD,CAVM,C,wDAYA,GAAME,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,IAAD,CAAOX,GAAP,CAAYY,YAAZ,CAA6B,CAC5D,MAAO,CACLA,YAAY,CAAEA,YAAY,CAAGA,YAAH,CAAmBD,IAAI,CAAG,GAD/C,CAELE,WAAW,CAAEb,GAAG,CAAG,CAAH,CAAO,CAFlB,CAGLc,WAAW,CAAE,aAHR,CAILC,cAAc,CAAE,QAJX,CAKLC,UAAU,CAAE,QALP,CAAP,CAOD,CARM,C","sourcesContent":["import initials from 'initials';\n\nexport const abbr = (name) => {\n  let abbr = initials(name);\n  if (name.startsWith('+')) {\n    abbr = `+${ abbr }`;\n  }\n  if (!abbr) {\n    console.warn('Could not get abbr from name');\n    abbr = name;\n  }\n  return abbr;\n};\n\nexport const sumChars = (str) => {\n  let sum = 0;\n  for (let i = 0; i < str.length; i++) {\n    sum += str.charCodeAt(i);\n  }\n\n  return sum;\n};\n\nexport const fetchImage = async (src) => {\n  try {\n    const fetchCall = await fetch(src);\n    if (fetchCall.headers.map['content-type'].startsWith('image/')) {\n      return true;\n    } else {\n      console.warn('Online fetched source is not a supported image');\n      return false;\n    }\n  } catch (err) {\n    console.warn('Error fetching source, falling back to initials', err);\n    return false;\n  }\n};\n\nexport const generateBackgroundStyle = (name, bgColor, bgColors) => {\n  let background;\n  if (bgColor) {\n    background = bgColor;\n  } else {\n    // Pick a deterministic color from the list\n    const i = sumChars(name) % bgColors.length;\n    background = bgColors[i];\n  }\n  return {backgroundColor: background};\n};\n\nexport const getContainerStyle = (size, src, borderRadius) => {\n  return {\n    borderRadius: borderRadius ? borderRadius : (size * 0.5),\n    borderWidth: src ? 0 : 1,\n    borderColor: 'transparent',\n    justifyContent: 'center',\n    alignItems: 'center',\n  };\n};\n"]}